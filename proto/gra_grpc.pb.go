// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: gra.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraClient is the client API for Gra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraClient interface {
	// tworzy mecz
	// zwraca ID gry
	NowyMecz(ctx context.Context, in *KonfiguracjaGry, opts ...grpc.CallOption) (*NowaGraInfo, error)
	// dołącza do nowej gry
	DolaczDoGry(ctx context.Context, in *Dolaczanie, opts ...grpc.CallOption) (*StanGry, error)
	// ruch gracza klienta
	MojRuch(ctx context.Context, in *RuchGracza, opts ...grpc.CallOption) (*StanGry, error)
}

type graClient struct {
	cc grpc.ClientConnInterface
}

func NewGraClient(cc grpc.ClientConnInterface) GraClient {
	return &graClient{cc}
}

func (c *graClient) NowyMecz(ctx context.Context, in *KonfiguracjaGry, opts ...grpc.CallOption) (*NowaGraInfo, error) {
	out := new(NowaGraInfo)
	err := c.cc.Invoke(ctx, "/Gra/NowyMecz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graClient) DolaczDoGry(ctx context.Context, in *Dolaczanie, opts ...grpc.CallOption) (*StanGry, error) {
	out := new(StanGry)
	err := c.cc.Invoke(ctx, "/Gra/DolaczDoGry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graClient) MojRuch(ctx context.Context, in *RuchGracza, opts ...grpc.CallOption) (*StanGry, error) {
	out := new(StanGry)
	err := c.cc.Invoke(ctx, "/Gra/MojRuch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraServer is the server API for Gra service.
// All implementations must embed UnimplementedGraServer
// for forward compatibility
type GraServer interface {
	// tworzy mecz
	// zwraca ID gry
	NowyMecz(context.Context, *KonfiguracjaGry) (*NowaGraInfo, error)
	// dołącza do nowej gry
	DolaczDoGry(context.Context, *Dolaczanie) (*StanGry, error)
	// ruch gracza klienta
	MojRuch(context.Context, *RuchGracza) (*StanGry, error)
	mustEmbedUnimplementedGraServer()
}

// UnimplementedGraServer must be embedded to have forward compatible implementations.
type UnimplementedGraServer struct {
}

func (UnimplementedGraServer) NowyMecz(context.Context, *KonfiguracjaGry) (*NowaGraInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NowyMecz not implemented")
}
func (UnimplementedGraServer) DolaczDoGry(context.Context, *Dolaczanie) (*StanGry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DolaczDoGry not implemented")
}
func (UnimplementedGraServer) MojRuch(context.Context, *RuchGracza) (*StanGry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MojRuch not implemented")
}
func (UnimplementedGraServer) mustEmbedUnimplementedGraServer() {}

// UnsafeGraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraServer will
// result in compilation errors.
type UnsafeGraServer interface {
	mustEmbedUnimplementedGraServer()
}

func RegisterGraServer(s grpc.ServiceRegistrar, srv GraServer) {
	s.RegisterService(&Gra_ServiceDesc, srv)
}

func _Gra_NowyMecz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KonfiguracjaGry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraServer).NowyMecz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gra/NowyMecz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraServer).NowyMecz(ctx, req.(*KonfiguracjaGry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gra_DolaczDoGry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dolaczanie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraServer).DolaczDoGry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gra/DolaczDoGry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraServer).DolaczDoGry(ctx, req.(*Dolaczanie))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gra_MojRuch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuchGracza)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraServer).MojRuch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gra/MojRuch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraServer).MojRuch(ctx, req.(*RuchGracza))
	}
	return interceptor(ctx, in, info, handler)
}

// Gra_ServiceDesc is the grpc.ServiceDesc for Gra service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gra_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gra",
	HandlerType: (*GraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NowyMecz",
			Handler:    _Gra_NowyMecz_Handler,
		},
		{
			MethodName: "DolaczDoGry",
			Handler:    _Gra_DolaczDoGry_Handler,
		},
		{
			MethodName: "MojRuch",
			Handler:    _Gra_MojRuch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gra.proto",
}
